ðŸš€  1. What is Docker?
â–º  What is a container and what problems does it solve?
- a way to package application with dependencies and configuration.
- easily shared an dmoved around

â–º  Container repository - where do containers live?
-public repositories (docker hub)
- before used to download multiple application install it base on specific version-all steps need to execute
- with container u dont have to download any specific services and aplication it has its own isolative os
- docker with postgre, os configuration and start script
- check what needed find that container and download it with command which fetched container and start at same time
- if 10 container, 10 docer command should run
- defore operatio and dev team was different.  diff procesdure leadsn to conflics used to in notted everything.
and now dev n ops team will worked together to package the whole configureation dependanciesinside application. it is encapsulated enviornment.
u dont have to configure directly on server. 
- Now u have to run comand and pull repo which u want and runs it


ðŸš€  2. What is a Container technically
â–º  What is a container technically? (layers of images)
- container is a layers of linux base image(alpine 3:10), appplication image with configuration(postgres 10:10)

â–º  Demo part (docker hub and run a docker container locally)
- postgre downloadfrm docker hub, run command ton terminal 
1. docker run postgres:9.6
2. docker ps

ðŸš€  3. Docker vs Virtual Machine

ðŸš€  4. Docker Installation
â–º  Before Installing Docker - prerequisites
â–º  Install docker on Mac, Windows, Linux

- check windows version is compatibale and virtualization is enabled
- run installation file
- download docker toolkit

ðŸš€  5. Main Docker Commands
â–º  docker pull, docker run, docker ps, docker stop, docker start, port mapping

- docker image vs container
image is just part of container so container is running enviornment of image
container is consiste of image(posygre), file system(log file), environmentt configuration(environmentak var)
container has a port to talk with application which is running inside container. port 5000
file system is virtual


ðŸš€  6. Debugging a Container
â–º  docker logs, docker exec -it

ðŸš€  7. Demo Project Overview - Docker in Practice (Nodejs App with MongoDB and MongoExpress UI)

ðŸš€  8. Developing with Containers 
â–º  JavaScript App (HTML, JavaScript Frontend, Node.js Backend)
â–º  MongoDB and Mongo Express Set-Up with Docker
â–º  Docker Network concept and demo

ðŸš€  9. Docker Compose - Running multiple services
â–º  What is Docker Compose?
â–º  How to use it - Create the Docker Compose File
â–º  Docker Networking in Docker Compose

ðŸš€  10. Dockerfile - Building our own Docker Image
â–º  What is a Dockerfile?
â–º  Create the Dockerfile
â–º  Build an image with Dockerfile

ðŸš€  11. Private Docker Repository - Pushing our built Docker Image into a private Registry on AWS
â–º  Private Repository on AWS ECR
â–º  docker login
â–º  docker tag
â–º  Push Docker Image to the Private Repo

ðŸš€  12. Deploy our containerized application

ðŸš€  13. Docker Volumes - Persist data in Docker
â–º  When do we need Docker Volumes?
â–º  What is Docker Volumes?
â–º  Docker Volumes Types

ðŸš€  14. Volumes Demo - Configure persistence for our demo project
